---
# tasks file for server-sing-box
- name: Remove old singbox's dir before installation
  ansible.builtin.command:
    cmd: rm -r ./singbox
    chdir: '{{ singbox_parent_path }}'
- name: Update apt repo and cache on all Debian/Ubuntu boxes
  ansible.builtin.apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
- name: Upgrade all packages on servers
  ansible.builtin.apt: upgrade=dist force_apt_get=yes
- name: Install curl jq
  ansible.builtin.package:  
    name: 
    - curl
    - jq
    state: present
- name: Fetch the latest (including pre-releases) release version number from GitHub API
  ansible.builtin.shell: 'curl -s "https://api.github.com/repos/SagerNet/sing-box/releases" | jq -r ".[0].name"'
  register: singbox_core_ver 
- name: Print url sinbox download
  ansible.builtin.debug:  
    msg: '{{ singbox_core_url }}'
- name: Extracting downloaded singbox
  ansible.builtin.unarchive:
    src: '{{ singbox_core_url }}'
    dest: '{{ singbox_parent_path }}'
    remote_src: yes 
- name: stat old_dir
  stat: path={{ singbox_old_path }}
  register: old_dir_stat    
- name: Rename singbox dir
  ansible.builtin.command: 'mv {{ singbox_old_path }} {{ singbox_path }}'
  when: old_dir_stat.stat.exists
- name: Changing mode singbox file
  ansible.builtin.file:
    path: '{{ singbox_path }}/sing-box'
    mode: '0755'
- name: Return key pair to registered var
  ansible.builtin.shell: '{{ singbox_path }}/sing-box generate reality-keypair'
  register: key_pair
- name: Return private key to registered var
  ansible.builtin.shell: echo {{ key_pair }} | awk "/PrivateKey/ {print $2}" | tr -d '"'
  register: private_key
- name: Return public key to registered var
  ansible.builtin.shell: echo {{ key_pair }} | awk "/PublicKey/ {print $2}" | tr -d '"'
  register: public_key
- name: Return UUID to registered var
  ansible.builtin.shell: '{{ singbox_path }}/sing-box generate uuid'
  register: uuid   
- name: Return short id to registered var
  ansible.builtin.shell: '{{ singbox_path }}/sing-box generate rand --hex 8'
  register: short_id    
- name: Print the server details
  ansible.builtin.debug:
    msg:
    - "Server IP: {{ server_ip }}"
    - "Listen Port: {{ listen_port }}"
    - "Server Name: {{ server_name }}"
    - "Private Key: {{ private_key }}"
    - "Public Key: {{ public_key }}"
    - "Short ID: {{ short_id }}"
    - "UUID: {{ uuid }}"  
# - name: Return server_ipv4 to registered var
#   ansible.builtin.command: 'curl -s https://api.ipify.org'
#   register: server_ipv4   
- name: Template for reality.json
  ansible.builtin.template:
    src: reality.json.jinja
    dest: '{{ singbox_path }}/reality.json'
    mode: '0644'
- name: Template for singbox.service
  ansible.builtin.template:
    src: singbox.service.jinja
    dest: '/etc/systemd/system/singbox.service'
    mode: '0644'
- name: Enabling and starting singbox.service
  ansible.builtin.shell: systemctl daemon-reload && systemctl enable --now singbox


